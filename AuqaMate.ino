/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/1d265aa6-6c8e-4958-8805-41c3a08f8a97 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String message;
  CloudSchedule schedule;
  bool feed_Now;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Servo.h>

Servo servo;
// Connect the Feed to digital pin D2 on NodeMcu
const int feed_Now_button = D2;
int FeedState1 = 0;  // Variable to store the state of the Feed
int FeedState2 = 0;

void setup() {
  // Initialize serial and wait for port to open:
  
  Serial.begin(9600);
  servo.attach(D1);  // Attach servo to pin D1 on NodeMcu
  pinMode(feed_Now_button, INPUT);
  pinMode(feed_Now, INPUT);  // Set the Feed pin as input
  Serial.println(FeedState1);
  Serial.println(FeedState2);
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  FeedState1 = digitalRead(feed_Now);  // Read the state of the Feed
  FeedState2 = digitalRead(feed_Now_button);
  
  if(FeedState1 == LOW){
    message = "The Fish is Fed through Online." ;
  }
  
  if(FeedState2 == LOW){
    message = "The Fish is Fed Manually." ;
  }
  
  if (FeedState1 == LOW || FeedState2 == LOW) {
    delay(500);
    feedPet(1440);  // If the Feed is pressed, rotate the servo 4 turns (1440 degrees)
    delay(100);  // Add a delay to avoid rapid feeding due to Feed bouncing
  }
}


void feedPet(int rotationDuration) {
  servo.writeMicroseconds(1000);  // Rotate clockwise (adjust as needed)
  delay(rotationDuration);  // Rotate for the specified duration (in milliseconds)
  servo.writeMicroseconds(1500);  // Stop rotation
  Serial.println("Feeding the pet :)");
}


/*
  Since FeedNow is READ_WRITE variable, onFeedNowChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFeedNowChange()  {
  // Add your code here to act upon FeedNow change
}




/*
  Since Schedule is READ_WRITE variable, onScheduleChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onScheduleChange()  {
  // Add your code here to act upon Schedule change
}
